generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

// Models
model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  roleId        Int
  role          Role           @relation(fields: [roleId], references: [id])
  tasks         Task[]         @relation("TaskCreator")
  refreshTokens RefreshToken[]

  @@map("users")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]

  @@map("roles")
}

model TaskCategory {
  id    Int    @id @default(autoincrement())
  name  String @unique
  tasks Task[]

  @@map("task_categories")
}

model TaskPriority {
  id    Int    @id @default(autoincrement())
  name  String @unique
  tasks Task[]

  @@map("task_priorities")
}

model Task {
  id          String         @id @default(uuid())
  title       String
  description String?
  status      TaskStatus  @default(PENDING)
  priority    TaskPriority @relation(fields: [priorityId], references: [id])
  priorityId  Int
  dueDate     DateTime?
  createdBy   User        @relation("TaskCreator", fields: [createdById], references: [id])
  createdById String
  category    TaskCategory @relation(fields: [categoryId], references: [id])
  categoryId  Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("tasks")
}

model RefreshToken {
  id        String   @id
  token     String?
  expiresAt DateTime
  revoked   Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("refresh_tokens")
}
